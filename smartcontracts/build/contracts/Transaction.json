{
  "contractName": "Transaction",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "totalPayments",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "ceoAddress",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_newCEO",
          "type": "address"
        }
      ],
      "name": "setCEO",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "withdrawPayments",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "name": "payments",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": "0x608060405234801561001057600080fd5b506105e6806100206000396000f30060806040526004361061008d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680625b4487146100925780630a0f8168146100bd57806327d7874c146101145780633f4ba83a146101575780635c975abb1461016e5780636103d70b1461019d5780638456cb59146101b4578063e2982c21146101cb575b600080fd5b34801561009e57600080fd5b506100a7610222565b6040518082815260200191505060405180910390f35b3480156100c957600080fd5b506100d2610228565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561012057600080fd5b50610155600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061024d565b005b34801561016357600080fd5b5061016c610327565b005b34801561017a57600080fd5b506101836103b9565b604051808215151515815260200191505060405180910390f35b3480156101a957600080fd5b506101b26103cc565b005b3480156101c057600080fd5b506101c96104f5565b005b3480156101d757600080fd5b5061020c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610589565b6040518082815260200191505060405180910390f35b60025481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156102a857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156102e457600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561038257600080fd5b600060149054906101000a900460ff16151561039d57600080fd5b60008060146101000a81548160ff021916908315150217905550565b600060149054906101000a900460ff1681565b600080339150600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000811415151561042457600080fd5b803073ffffffffffffffffffffffffffffffffffffffff16311015151561044a57600080fd5b61045f816002546105a190919063ffffffff16565b6002819055506000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156104f0573d6000803e3d6000fd5b505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561055057600080fd5b600060149054906101000a900460ff1615151561056c57600080fd5b6001600060146101000a81548160ff021916908315150217905550565b60016020528060005260406000206000915090505481565b60008282111515156105af57fe5b8183039050929150505600a165627a7a7230582047f42aee288a2c01dd80da08aa73c90595772c865baa359e1a206164c0b29d950029",
  "deployedBytecode": "0x60806040526004361061008d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680625b4487146100925780630a0f8168146100bd57806327d7874c146101145780633f4ba83a146101575780635c975abb1461016e5780636103d70b1461019d5780638456cb59146101b4578063e2982c21146101cb575b600080fd5b34801561009e57600080fd5b506100a7610222565b6040518082815260200191505060405180910390f35b3480156100c957600080fd5b506100d2610228565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561012057600080fd5b50610155600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061024d565b005b34801561016357600080fd5b5061016c610327565b005b34801561017a57600080fd5b506101836103b9565b604051808215151515815260200191505060405180910390f35b3480156101a957600080fd5b506101b26103cc565b005b3480156101c057600080fd5b506101c96104f5565b005b3480156101d757600080fd5b5061020c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610589565b6040518082815260200191505060405180910390f35b60025481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156102a857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156102e457600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561038257600080fd5b600060149054906101000a900460ff16151561039d57600080fd5b60008060146101000a81548160ff021916908315150217905550565b600060149054906101000a900460ff1681565b600080339150600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000811415151561042457600080fd5b803073ffffffffffffffffffffffffffffffffffffffff16311015151561044a57600080fd5b61045f816002546105a190919063ffffffff16565b6002819055506000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156104f0573d6000803e3d6000fd5b505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561055057600080fd5b600060149054906101000a900460ff1615151561056c57600080fd5b6001600060146101000a81548160ff021916908315150217905550565b60016020528060005260406000206000915090505481565b60008282111515156105af57fe5b8183039050929150505600a165627a7a7230582047f42aee288a2c01dd80da08aa73c90595772c865baa359e1a206164c0b29d950029",
  "sourceMap": "589:9729:7:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;589:9729:7;;;;;;;",
  "deployedSourceMap": "589:9729:7:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;339:28:3;;8:9:-1;5:2;;;30:1;27;20:12;5:2;339:28:3;;;;;;;;;;;;;;;;;;;;;;;222:25:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;222:25:0;;;;;;;;;;;;;;;;;;;;;;;;;;;405:127;;8:9:-1;5:2;;;30:1;27;20:12;5:2;405:127:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;760:76;;8:9:-1;5:2;;;30:1;27;20:12;5:2;760:76:0;;;;;;296:18;;8:9:-1;5:2;;;30:1;27;20:12;5:2;296:18:0;;;;;;;;;;;;;;;;;;;;;;;;;;;444:301:3;;8:9:-1;5:2;;;30:1;27;20:12;5:2;444:301:3;;;;;;679:76:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;679:76:0;;;;;;291:43:3;;8:9:-1;5:2;;;30:1;27;20:12;5:2;291:43:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;339:28;;;;:::o;222:25:0:-;;;;;;;;;;;;;:::o;405:127::-;371:10;;;;;;;;;;;357:24;;:10;:24;;;349:33;;;;;;;;492:1;473:21;;:7;:21;;;;465:30;;;;;;;;518:7;505:10;;:20;;;;;;;;;;;;;;;;;;405:127;:::o;760:76::-;371:10;;;;;;;;;;;357:24;;:10;:24;;;349:33;;;;;;;;649:6;;;;;;;;;;;641:15;;;;;;;;824:5;815:6;;:14;;;;;;;;;;;;;;;;;;760:76::o;296:18::-;;;;;;;;;;;;;:::o;444:301:3:-;486:13;519:15;502:10;486:26;;537:8;:15;546:5;537:15;;;;;;;;;;;;;;;;519:33;;580:1;569:7;:12;;561:21;;;;;;;;622:7;605:4;597:21;;;:32;;589:41;;;;;;;;655:26;673:7;655:13;;:17;;:26;;;;:::i;:::-;639:13;:42;;;;706:1;688:8;:15;697:5;688:15;;;;;;;;;;;;;;;:19;;;;716:5;:14;;:23;731:7;716:23;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;716:23:3;444:301;;:::o;679:76:0:-;371:10;;;;;;;;;;;357:24;;:10;:24;;;349:33;;;;;;;;581:6;;;;;;;;;;;580:7;572:16;;;;;;;;744:4;735:6;;:13;;;;;;;;;;;;;;;;;;679:76::o;291:43:3:-;;;;;;;;;;;;;;;;;:::o;867:113:6:-;925:7;953:1;948;:6;;941:14;;;;;;973:1;969;:5;962:12;;867:113;;;;:::o",
  "source": "pragma solidity ^0.4.21;\r\n\r\nimport \"./AccessControl.sol\";\r\n//import \"./BuyAndSell.sol\";\r\nimport \"./PullPayment.sol\";\r\n//import \"./RentAndLease.sol\";\r\n\r\n\r\n// 交易合约\r\n// 合约想法： 类似一个交易平台，只要获得书籍的基本信息（合约地址，tokenID) 和 一些交易参数（价格，时长） 既可以完成交易。\r\n// 合约说明： 通过获取书籍的合约地址以及tokenId,  通过sha3生成交易index， 实现买卖\r\n// @param  transaction  售卖合约地址\r\n// @param  rentAndLease 租赁合约地址\r\n// @param  newContract  新合约地址\r\ncontract Transaction is AccessControl, PullPayment {\r\n\r\n/*\r\n    BuyAndSell public buyAndSell;           // 买卖合约地址\r\n    RentAndLease public rentAndLease;       // 租赁合约地址\r\n    Transaction public newContract;         // 新合约地址\r\n\r\n    constructor() public {\r\n        ceoAddress = msg.sender;\r\n    }\r\n\r\n    function fallback() external payable {\r\n\r\n    }\r\n\r\n    event Buy(address _contract, uint256 _tokenId, address _buyer);\r\n    event Sell(address _contract, uint256 _tokenId, address _seller);\r\n    event Rent(address _contract, uint256 _tokenId, address _renter);\r\n    event Lease(address _contract, uint256 _tokenId, address _leaser);\r\n    event BuyCancel(address _contract, uint256 _tokenId);\r\n    event RentCancel(address _contract, uint256 _tokenId);\r\n\r\n    // @dev 提取账户余额，不只是ceo\r\n    // @notice 所有的转账都使用这一个函数实现，交易过程不产生转账\r\n    function withdraw() external whenNotPaused {\r\n        withdrawPayments();\r\n    }\r\n\r\n    // @dev 调用者是否拥有图书\r\n    function _owns(address _contract, uint256 _tokenId) internal view returns(bool) {\r\n        require(_tokenId == uint32(_tokenId));\r\n        ERC721  nonFungibleContract = ERC721(_contract);\r\n        return nonFungibleContract.ownerOf(_tokenId) == msg.sender;\r\n    }\r\n\r\n    // @dev token所有权转移\r\n    function _transferToOwner(address _contract, address _to, uint256 _tokenId) internal {\r\n        ERC721Expand  nonFungibleContract = ERC721Expand(_contract);\r\n        nonFungibleContract.transfer(_to, _tokenId);\r\n    }\r\n\r\n    // @dev token所有权转移给合约\r\n    function _transferToContract(address _contract, uint256 _tokenId) internal {\r\n        require(_owns(_contract, _tokenId));\r\n        ERC721 nonFungibleContract = ERC721(_contract);\r\n        nonFungibleContract.transferFrom(msg.sender, this, _tokenId);    // 失败，平台尚未授权\r\n    }\r\n\r\n    // @dev 设置交易合约地址\r\n    function setBuyAndSell(address _addr) external onlyCEO {\r\n       buyAndSell = BuyAndSell(_addr);\r\n    }\r\n\r\n\r\n    // @dev 设置租赁合约地址\r\n    function setRentAndLease(address _addr) external onlyCEO {\r\n        rentAndLease = RentAndLease(_addr);\r\n    }\r\n\r\n    // @dev 设置新合约地址， 暂停交易\r\n    function setNewAddress(address _addr) external onlyCEO {\r\n        newContract = Transaction(_addr);\r\n        super.pause();\r\n    }\r\n\r\n\r\n    // 设置买卖费用，只有ceo可以调用\r\n    function setBuyFees(uint256 _price) external onlyCEO {\r\n        buyAndSell.setFees(_price);\r\n    }\r\n\r\n    // 设置租赁费用，只有ceo可以调用\r\n    function setLeaseFess(uint256 _price) external onlyCEO {\r\n        rentAndLease.setFees(_price);\r\n    }\r\n\r\n\r\n    //  判断平台是否授权买卖(租赁)token\r\n    function getApproved(address _contract, uint256 _tokenId) public view returns(bool) {\r\n        ERC721  nonFungibleContract = ERC721(_contract);\r\n        return nonFungibleContract.getApproved(_tokenId) == address(this);\r\n    }\r\n\r\n    // 出售图书\r\n    // @param: _contract:  合约地址\r\n    // @param: _tokenId:   tokenId\r\n    // @param: _price:     出售价格\r\n    // @notice: 必须先approve交易合约\r\n    // @return 交易index mapping(index => _contract and _tokenId),外部数据库实现\r\n    function sell(\r\n        address _contract,\r\n        uint256 _tokenId,\r\n        uint256 _price\r\n        )\r\n        external\r\n        whenNotPaused\r\n        returns(bytes32)\r\n    {\r\n        require(getApproved(_contract,_tokenId));   // 平台已经授权买卖\r\n        require(buyAndSell != address(0));\r\n        require(_price == uint128(_price));\r\n        require(_tokenId == uint32(_tokenId));\r\n        ERC721Expand  nonFungibleContract = ERC721Expand(_contract);\r\n        require(nonFungibleContract.ownerOf(_tokenId) == msg.sender);\r\n        _transferToContract(_contract, _tokenId);\r\n        buyAndSell.sell(_contract, _tokenId, _price, msg.sender);\r\n        nonFungibleContract.creatSell(_tokenId);\r\n        emit Sell(_contract, _tokenId, msg.sender);\r\n    }\r\n\r\n    // @dev 出租token\r\n    // @notice 合约地址先获权\r\n    // @param: _contract:  合约地址\r\n    // @param: _tokenId:   tokenId\r\n    // @param: _price:     租赁价格\r\n    // @param: _rentTime:  租赁时长\r\n    // @return 交易index（展示给用户）  mapping(index => _contract and _tokenId),外部数据库实现\r\n    function rent(\r\n        address _contract,\r\n        uint256 _tokenId,\r\n        uint256 _price,\r\n        uint256 _rentTime\r\n        )\r\n        external\r\n        whenNotPaused\r\n        returns(bytes32)\r\n    {\r\n        require(rentAndLease != address(0));\r\n        require(_tokenId == uint32(_tokenId));\r\n        require(_price == uint128(_price));\r\n        require(_rentTime >= 1 minutes);\r\n        require(_rentTime == uint128(_rentTime));\r\n        ERC721Expand  nonFungibleContract = ERC721Expand(_contract);\r\n        require(nonFungibleContract.ownerOf(_tokenId) == msg.sender);\r\n        require(!nonFungibleContract.isLease(_tokenId));\r\n        // nonFungibleContract.transferFrom(msg.sender, this, _tokenId);\r\n        rentAndLease.rent(_contract, _tokenId, _price, _rentTime, msg.sender);\r\n        nonFungibleContract.creatRent(_tokenId);\r\n        emit Rent(_contract, _tokenId, msg.sender);\r\n    }\r\n\r\n\r\n    // function rentFinish(address _contract, uint256 _tokenId) external onlyCEO {\r\n    //     rentAndLease.rentFinish(_contract,_tokenId);\r\n    // }\r\n\r\n\r\n    // @dev 购买图书\r\n    // @param: _contract:  合约地址\r\n    // @param: _tokenId:   tokenId\r\n    function buy(address _contract, uint256 _tokenId) external payable whenNotPaused {  // 购买token\r\n        require(_tokenId == uint32(_tokenId));\r\n        ERC721Expand  nonFungibleContract = ERC721Expand(_contract);\r\n        uint256  _this;   uint256  _author; uint256  _sender;\r\n        bool  success;    address  sellerAddress;\r\n        (success, sellerAddress, _this, _author, _sender)  = buyAndSell.buy(_contract, _tokenId, msg.value);\r\n        if( success ) {\r\n            asyncSend(this, _this);\r\n            asyncSend(sellerAddress, _author);\r\n            asyncSend(msg.sender, _sender);\r\n        }\r\n        nonFungibleContract.sellFinish(_tokenId);\r\n        nonFungibleContract.transfer(msg.sender, _tokenId);\r\n        emit Buy(_contract, _tokenId, msg.sender);\r\n    }\r\n\r\n    // 租赁token\r\n    // @param: _contract:  合约地址\r\n    // @param: _tokenId:   tokenId\r\n    function lease(address _contract, uint256 _tokenId) external payable whenNotPaused {\r\n        ERC721Expand  nonFungibleContract = ERC721Expand(_contract);\r\n        require(_tokenId == uint32(_tokenId));\r\n        uint256  _this;     uint256  _author;  uint256  _sender;\r\n        uint256 _rentTime;  bool  success;     address  renterAddress;\r\n        (success, _rentTime, renterAddress, _this, _author, _sender) = rentAndLease.lease(_contract, _tokenId, msg.sender, msg.value);\r\n        if( success ) {\r\n            asyncSend(this, _this);\r\n            asyncSend(renterAddress, _author);\r\n            asyncSend(msg.sender, _sender);\r\n        }\r\n        nonFungibleContract.rentTo(_tokenId, msg.sender, _rentTime);\r\n        emit Lease(_contract, _tokenId, msg.sender);\r\n    }\r\n\r\n\r\n    // @dev 取消售卖\r\n    function cancelSell(address _contract, uint256 _tokenId) external {\r\n        require(_tokenId == uint32(_tokenId));\r\n        require(buyAndSell.getSeller(_contract, _tokenId) == msg.sender);\r\n        buyAndSell.cancelSell(_contract, _tokenId, msg.sender);\r\n        ERC721Expand  nonFungibleContract = ERC721Expand(_contract);\r\n        nonFungibleContract.sellCancel(_tokenId);\r\n        nonFungibleContract.transfer(msg.sender, _tokenId);\r\n    }\r\n\r\n    // @dev 取消租赁\r\n    function cancelRent(address _contract, uint256 _tokenId) external {\r\n        require(_tokenId == uint32(_tokenId));\r\n        require(rentAndLease.getRenter(_contract, _tokenId) == msg.sender);\r\n        ERC721Expand  nonFungibleContract = ERC721Expand(_contract);\r\n        nonFungibleContract.rentCancel(_tokenId);\r\n        rentAndLease.cancelRent(_contract, _tokenId, msg.sender);\r\n    }\r\n\r\n    // @dev 修改售卖价格\r\n    function setSellPrice(address _contract, uint256 _tokenId, uint256 _price) external {\r\n        buyAndSell.setPrice(_contract, _tokenId, _price, msg.sender);\r\n\r\n    }\r\n\r\n    // @dev 修改出租信息\r\n    function setRentInfo(address _contract, uint256 _tokenId, uint256 _price, uint256 _rentTime) external {\r\n        require(_rentTime == uint128(_rentTime));\r\n        rentAndLease.setPriceAndTime(_contract, _tokenId, _price,_rentTime, msg.sender);\r\n    }\r\n\r\n    // @dev 获取售卖信息\r\n    // @return  售卖者地址，  售卖价格，  售卖时间\r\n    function getSellInfo(\r\n        address _contract,\r\n        uint256 _tokenId\r\n        )\r\n        external\r\n        view\r\n        returns(\r\n            address,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        return buyAndSell.getSellInfo(_contract, _tokenId);\r\n    }\r\n\r\n    // @dev 获取出租信息\r\n    // @return  售卖者地址，  售卖价格，  出租时长，  售卖时间\r\n    function getRentInfo(\r\n        address _contract,\r\n        uint256 _tokenId\r\n        )\r\n        external\r\n        view\r\n        returns(\r\n            address,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        return rentAndLease.getRentInfo(_contract, _tokenId);\r\n    }\r\n\r\n    // @dev 禁止交易\r\n    function pauseContract() external onlyCEO whenNotPaused {\r\n        super.pause();\r\n    }\r\n\r\n    // @dev 恢复交易\r\n    function unpauseContract() external onlyCEO whenPaused {\r\n        super.unpause();\r\n    }\r\n\r\n*/\r\n\r\n}\r\n",
  "sourcePath": "F:\\ChainBook\\smartcontracts\\contracts\\Transaction.sol",
  "ast": {
    "absolutePath": "/F/ChainBook/smartcontracts/contracts/Transaction.sol",
    "exportedSymbols": {
      "Transaction": [
        1120
      ]
    },
    "id": 1121,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1113,
        "literals": [
          "solidity",
          "^",
          "0.4",
          ".21"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:7"
      },
      {
        "absolutePath": "/F/ChainBook/smartcontracts/contracts/AccessControl.sol",
        "file": "./AccessControl.sol",
        "id": 1114,
        "nodeType": "ImportDirective",
        "scope": 1121,
        "sourceUnit": 79,
        "src": "28:29:7",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/F/ChainBook/smartcontracts/contracts/PullPayment.sol",
        "file": "./PullPayment.sol",
        "id": 1115,
        "nodeType": "ImportDirective",
        "scope": 1121,
        "sourceUnit": 305,
        "src": "89:27:7",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1116,
              "name": "AccessControl",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 78,
              "src": "613:13:7",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_AccessControl_$78",
                "typeString": "contract AccessControl"
              }
            },
            "id": 1117,
            "nodeType": "InheritanceSpecifier",
            "src": "613:13:7"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1118,
              "name": "PullPayment",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 304,
              "src": "628:11:7",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_PullPayment_$304",
                "typeString": "contract PullPayment"
              }
            },
            "id": 1119,
            "nodeType": "InheritanceSpecifier",
            "src": "628:11:7"
          }
        ],
        "contractDependencies": [
          78,
          304
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 1120,
        "linearizedBaseContracts": [
          1120,
          304,
          78
        ],
        "name": "Transaction",
        "nodeType": "ContractDefinition",
        "nodes": [],
        "scope": 1121,
        "src": "589:9729:7"
      }
    ],
    "src": "0:10320:7"
  },
  "legacyAST": {
    "absolutePath": "/F/ChainBook/smartcontracts/contracts/Transaction.sol",
    "exportedSymbols": {
      "Transaction": [
        1120
      ]
    },
    "id": 1121,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1113,
        "literals": [
          "solidity",
          "^",
          "0.4",
          ".21"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:7"
      },
      {
        "absolutePath": "/F/ChainBook/smartcontracts/contracts/AccessControl.sol",
        "file": "./AccessControl.sol",
        "id": 1114,
        "nodeType": "ImportDirective",
        "scope": 1121,
        "sourceUnit": 79,
        "src": "28:29:7",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/F/ChainBook/smartcontracts/contracts/PullPayment.sol",
        "file": "./PullPayment.sol",
        "id": 1115,
        "nodeType": "ImportDirective",
        "scope": 1121,
        "sourceUnit": 305,
        "src": "89:27:7",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1116,
              "name": "AccessControl",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 78,
              "src": "613:13:7",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_AccessControl_$78",
                "typeString": "contract AccessControl"
              }
            },
            "id": 1117,
            "nodeType": "InheritanceSpecifier",
            "src": "613:13:7"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1118,
              "name": "PullPayment",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 304,
              "src": "628:11:7",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_PullPayment_$304",
                "typeString": "contract PullPayment"
              }
            },
            "id": 1119,
            "nodeType": "InheritanceSpecifier",
            "src": "628:11:7"
          }
        ],
        "contractDependencies": [
          78,
          304
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 1120,
        "linearizedBaseContracts": [
          1120,
          304,
          78
        ],
        "name": "Transaction",
        "nodeType": "ContractDefinition",
        "nodes": [],
        "scope": 1121,
        "src": "589:9729:7"
      }
    ],
    "src": "0:10320:7"
  },
  "compiler": {
    "name": "solc",
    "version": "0.4.24+commit.e67f0147.Emscripten.clang"
  },
  "networks": {
    "4447": {
      "events": {},
      "links": {},
      "address": "0xde5bb8b8961faef05b2ab38a70c81bdbc91add29",
      "transactionHash": "0xf6ea6106a00df9000bceecc34bf67f9523475feb8e3718bff94e8be74cb8baf1"
    },
    "1528040299132": {
      "events": {},
      "links": {},
      "address": "0xc362021dbcb4e60e295812a75bf4d3b0ffbd2a55",
      "transactionHash": "0x988e93f207cc4a4a34cad851325ff5c8ae5104e7db27168392d852c41772b67c"
    },
    "1528299678353": {
      "events": {},
      "links": {},
      "address": "0x387d33a301a8843655fee328948618f4874852e5",
      "transactionHash": "0x5cd056dcd920e148aa57ec5eee0a64988f8f5c57a552ebd3d43e9527c6c2702c"
    },
    "1528423579857": {
      "events": {},
      "links": {},
      "address": "0x4b083e99221eb366f0d7e5d8d5f30b754c488b08",
      "transactionHash": "0xd317b4cc3dba0c2c7e947ec44867d979ca69e44d8236854872b90a9538758605"
    },
    "1528435919039": {
      "events": {},
      "links": {},
      "address": "0xf0579207ef3d577675797decffbe717d531eb5f6",
      "transactionHash": "0x6863d71376a10c6437f216dc6409897273757c665cbf81260cd39d93a8caecd8"
    },
    "1528443918596": {
      "events": {},
      "links": {},
      "address": "0xceb892219b901bf24f99d59570d0bf14d9762dc8",
      "transactionHash": "0x605413cc19fbc2b149f7dcb43d50c6ad8300185c791c1ac355dc916d9d5001fc"
    },
    "1528457193959": {
      "events": {},
      "links": {},
      "address": "0x914fc20d8c414e1785bcda418f892276317eb76b",
      "transactionHash": "0x5dc086fd665a847d06436b198b0747d14fedcd5cd5abcbfc69e2960e326e00d9"
    },
    "1528465867555": {
      "events": {},
      "links": {},
      "address": "0x740d429f17427ebd8621a061c57905e2195cf3a9",
      "transactionHash": "0x62797f23b9372662d49729aad2fff06a1494f7f24991bc9ba8d4b56c1e468ffa"
    },
    "1528559858271": {
      "events": {},
      "links": {},
      "address": "0xf346f0b0f3bb31c905a4a9b2531daaacf2c635c3",
      "transactionHash": "0x51901dcb447550a3516b2d8903714a56ec317b16bb1bafa1bfdb19c1d9e8556a"
    }
  },
  "schemaVersion": "2.0.0",
  "updatedAt": "2018-06-10T15:12:36.039Z"
}